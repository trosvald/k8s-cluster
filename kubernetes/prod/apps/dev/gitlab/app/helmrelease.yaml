---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: gitlab
spec:
  releaseName: gitlab
  interval: 30m
  chart:
    spec:
      chart: gitlab
      version: 7.9.1
      sourceRef:
        kind: HelmRepository
        name: gitlab
        namespace: flux-system
      interval: 15m
  timeout: 30m
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      edition: ee
      extraEnv:
        GITLAB_LOG_LEVEL: 'error'
      initialRootPassword:
        secret: &secret gitlab-secret
        key: INITIAL_ROOT_PASSWORD
      nodeSelector:
        kubernetes.io/arch: amd64
      hosts:
        domain: &domain monosense.io
        # minio:
        #   name: artifact.monosense.io
      minio:
        enabled: false
      ingress:
        class: external-nginx
        annotations:
          external-dns.alpha.kubernetes.io/target: ingress-ext.monosense.io
          # nginx.ingress.kubernetes.io/custom-http-errors: "418"
          nginx.ingress.kubernetes.io/enable-global-auth: 'false'
        # Wildcard is configured by default
        configureCertmanager: false
        # TLS is enabled by default
        tls:
          enabled: true
          secretName: monosense-io-tls
      certmanager:
        installCRDs: false
        install: false
        rbac:
          create: false
      kas:
        enabled: false
      pages:
        enabled: false
      email:
        display_name: 'Monosense GitLab'
        from: 'info@monosense.io'
        reply_to: 'no-reply@monosense.io'
      psql:
        port: 5432
        password:
          secret: *secret
          key: POSTGRES_PASS
      redis:
        host: redis-master
        auth:
          enabled: false
        sentinels:
          - host: redis-node-0.redis-headless.database.svc.cluster.local
            port: 26379
          - host: redis-node-1.redis-headless.database.svc.cluster.local
            port: 26379
          - host: redis-node-2.redis-headless.database.svc.cluster.local
            port: 26379
      smtp:
        enabled: true
        domain: *domain
        starttls_auto: true
        password:
          secret: *secret
          key: SMTP_PASS
      registry:
        bucket: gitlab-registry
      appConfig:
        lfs:
          bucket: gitlab-rail
          connection:
            secret: gitlab-rail-storage
            key: connection
        artifacts:
          bucket: gitlab-artifacts
          connection:
            secret: gitlab-artifacts-storage
            key: connection
        uploads:
          bucket: gitlab-uploads
          connection:
            secret: gitlab-uploads-storage
            key: connection
        packages:
          bucket: gitlab-packages
          connection:
            secret: gitlab-packages-storage
            key: connection
        backups:
          bucket: gitlab-backup
          tmpBucket: gitlab-tmp-backup
        # Reference : https://docs.gitlab.com/charts/charts/globals.html#omniauth
        #             https://goauthentik.io/integrations/services/gitlab/
        omniauth:
          enabled: true
          autoSignInWithProvider: 'saml'
          allowSingleSignOn: ['saml']
          syncProfileFromProvider: ['saml']
          syncProfileAttributes: ['email']
          blockAutoCreatedUsers: false
          autoLinkSamlUser: true
          syncEmailFromProvider: 'saml'
          providers:
            - secret: gitlab-saml-secret
    # Reduce memory usage
    registry:
      storage:
        secret: gitlab-registry-storage
        key: config
    gitlab:
      gitaly:
        persistence:
          storageClass: ceph-block
          size: 300Gi
        resources:
          requests:
            cpu: 80m
            memory: 340M
          limits:
            cpu: 1800m
      webservice:
        minReplicas: 1
        maxReplicas: 2
        # https://gitlab.com/gitlab-org/charts/gitlab/-/blob/master/examples/ref/2k.yaml
        workerProcesses: 2
        resources:
          limits:
            memory: 3.0Gi # roughly, 1.5GB/worker
          requests:
            cpu: "1.1" # requests.cpu <= workerProcesses
            memory: 2.50Gi # roughly, 1.25GB/worker
      # sidekiq:
      #   minReplicas: 1
      #   maxReplicas: 2
      gitlab-shell:
        minReplicas: 1
        maxReplicas: 2
      toolbox:
        # Reference : https://docs.gitlab.com/charts/backup-restore/backup.html#specify-s3-tool-to-use
        extraEnvFrom:
          AWS_ACCESS_KEY_ID:
            secretKeyRef:
              name: gitlab-backup-secret
              key: accesskey
          AWS_SECRET_ACCESS_KEY:
            secretKeyRef:
              name: gitlab-backup-secret
              key: secretkey
        extraEnv:
          AWS_DEFAULT_REGION: dpk-ptr-tcore-1
        backups:
          cron:
            enabled: true
            schedule: "@daily"
            extraArgs: "--s3tool awscli --aws-s3-endpoint-url https://s3.monosense.io:9000"
          objectStorage:
            config:
              secret: s3cmd-secret
              key: local
      # gitlab-pages:
      #   # The default requests are massive for a static server
      #   resources:
      #     requests:
      #       cpu: 10m
      #       memory: 10Mi
    # Disable things we handle by ourselves
    postgresql:
      install: false
    redis:
      install: false
    certmanager:
      install: false
    nginx-ingress:
      enabled: false
    prometheus:
      install: false
    grafana:
      enabled: false
    gitlab-runner:
      concurrent: 4
      runners:
        nodeSelector:
          kubernetes.io/arch: amd64
        secret: gitlab-runner-secret
        config: |
          [[runners]]
            environment = ["FF_GITLAB_REGISTRY_HELPER_IMAGE=true"]
            builds_dir = "/builds"
            [runners.feature_flags]
              FF_USE_ADVANCED_POD_SPEC_CONFIGURATION = true
            [runners.kubernetes]
              node_selector_overwrite_allowed = ".*"
              image = "alpine:latest"
              privileged = true
              # build container
              cpu_limit = "600m"
              memory_limit = "1Gi"
              # service containers
              service_cpu_limit = "600m"
              service_memory_limit = "1Gi"
              # helper container
              helper_cpu_limit = "600m"
              helper_memory_limit = "200Mi"
              [[runners.kubernetes.volumes.host_path]]
                name = "devices"
                host_path = "/dev"
                mount_path = "/dev"
                read_only = true
              [[runners.kubernetes.pod_spec]]
                name = "ephemeral-builds"
                patch_type = "strategic"
                patch = '''
                  containers:
                  - name: build
                    volumeMounts:
                    - name: builds
                      mountPath: /builds
                  - name: helper
                    volumeMounts:
                    - name: builds
                      mountPath: /builds
                  volumes:
                  - name: builds
                    ephemeral:
                      volumeClaimTemplate:
                        spec:
                          accessModes: [ ReadWriteOnce ]
                          resources:
                            requests:
                              storage: 8Gi
              '''
              [[runners.kubernetes.volumes.empty_dir]]
                name = "docker-certs"
                mount_path = "/certs/client"
                medium = "Memory"
        # cache:
        #   secretName: google-application-credentials
      securityContext:
        runAsUser: 999
        fsGroup: 999
      resources:
        requests:
          cpu: 1000m
          memory: 512M
      volumes:
        - name: root-gitlab-runner
          emptyDir:
            medium: "Memory"
      volumeMounts:
        - name: root-gitlab-runner
          mountPath: /.gitlab-runner
  # postRenderers:
  #   - kustomize:
  #     patches:
  #       - patch: |-
  #         apiVersion: apps/v1
  #         kind: Deployment
  #         metadata:
  #           name: dummy-app
  #         spec:
  #           template:
  #             spec:
  #               nodeSelector:
  #                 kubernetes.io/arch: amd64
  #         target:
  #           kind: Deployment
  #       - patch: |-
  #         apiVersion: apps/v1
  #         kind: StatefulSet
  #         metadata:
  #           name: dummy-app
  #         spec:
  #           template:
  #             spec:
  #               nodeSelector:
  #                 kubernetes.io/arch: amd64
  #         target:
  #           kind: StatefulSet
  valuesFrom:
    # DATABASE
    - kind: Secret
      name: *secret
      valuesKey: POSTGRES_HOST
      targetPath: global.psql.host
    - kind: Secret
      name: *secret
      valuesKey: POSTGRES_DB
      targetPath: global.psql.database
    - kind: Secret
      name: *secret
      valuesKey: POSTGRES_USER
      targetPath: global.psql.username
    # STMP
    - kind: Secret
      name: *secret
      valuesKey: SMTP_SERVER
      targetPath: global.smtp.address
    - kind: Secret
      name: *secret
      valuesKey: SMTP_USERNAME
      targetPath: global.smtp.user_name
    - kind: Secret
      name: *secret
      valuesKey: SMTP_PORT
      targetPath: global.smtp.port
