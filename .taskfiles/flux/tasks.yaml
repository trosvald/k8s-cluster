---
version: "3"

tasks:
  verify:
    desc: Verify flux meets the prerequisites
    cmds:
      - flux check --pre

  install:
    desc: Install Flux into your cluster
    cmds:
      - kubectl apply --server-side --kustomize {{.KUBERNETES_DIR}}/prod/bootstrap
      - cat {{.SOPS_AGE_KEY_FILE}} | kubectl -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin
      # - sops --decrypt {{.KUBERNETES_DIR}}/prod/flux/vars/cluster-secrets.sops.yaml | kubectl  apply -f -
      - kubectl apply --server-side -f {{.KUBERNETES_DIR}}/prod/flux/vars/cluster-settings.yaml
      - kubectl apply --server-side --kustomize {{.KUBERNETES_DIR}}/prod/flux/config
    preconditions:
      - sh: test -f {{.SOPS_AGE_KEY_FILE}}
        msg: |
          Age key file is not found. Did you forget to create it?
    vars:
      SOPS_AGE_KEY_FILE: ~/.config/sops/age/keys.txt

  reconcile:
    desc: Force update Flux to pull in changes from your Git repository
    cmds:
      - flux reconcile -n flux-system source git production
      - flux reconcile -n flux-system kustomization prod-apps

  hr-restart:
    desc: Restart all failed Helm Releases
    cmds:
      - kubectl get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -l bash -c 'flux suspend hr $0 -n $1'
      - kubectl get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -l bash -c 'flux resume hr $0 -n $1'

  # Flux sync
  gr-sync:
    desc: Sync all flux GitRepositories
    cmds:
      - |
        kubectl get gitrepositories --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs -P -4 -l 1 bash -c \
            'kubectl -n $0 annotate gitrepository/$1 reconcile.fluxcd.io/requestedAt=$(date +%s) --field-manager=flux-client-side-apply --overwrite'

  ks-sync:
    desc: Sync all Flux Kustomizations
    cmds:
      - |
        kubectl get kustomization --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs -P 4 -L 1 bash -c \
            'kubectl -n $0 annotate kustomization/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --field-manager=flux-client-side-apply --overwrite'

  hr-sync:
    desc: Sync all Flux HelmReleases
    cmds:
      - |
        kubectl get helmreleases --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs -P 4 -L 1 bash -c \
            'kubectl -n $0 annotate helmrelease/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --overwrite'

  tf-sync:
    desc: Sync Flux Terraforms
    cmds:
      - |
        kubectl get terraforms --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs -P 4 -L 1 bash -c \
            'kubectl -n $0 annotate terraform/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --overwrite'

  # Suspend and Resume
  # Flux HelmReleases
  hr-suspend:
    desc: Suspend flux helmrelease resources
    summary: |
      Args:
        ns: Namespace the helmrelease is in (default: default)
        release: HelmRelease name to suspend (required)
    silent: true
    vars:
      ns: '{{ .ns | default "default"}}'
      release: '{{ or .release (fail "Argument (release) is required") }}'
      cmd: flux suspend helmrelease -n {{.ns}} {{.release}}
      # preconditions:
        # - sh: flux get helmrelease -n {{.ns}} {{.release}}
        #   msg: "HelmRelease name not found"

  hr-resume:
    desc: Resume flux helmrelease resources
    summary: |
      Args:
        ns: Namespace the helmrelease is in (default: default)
        release: HelmRelease name to resume (required)
    silent: true
    vars:
      ns: '{{ .ns | default "default"}}'
      release: '{{ or .release (fail "Argument (release) is required") }}'
      cmd: flux resume helmrelease -n {{.ns}} {{.release}}
      # preconditions:
        # - sh: flux get helmrelease -n {{.ns}} {{.release}}
          # msg: "HelmRelease name not found"

  hr-suspend-all:
    desc: Suspend all flux HelmReleases
    cmds:
      - |
        flux get helmrelease --all-namespaces --no-header | awk '{print $1, $2}' \
          | xargs -L 1 bash -c 'flux -n $0 suspend helmrelease $1'

  hr-resume-all:
    desc: Resume all Flux HelmReleases
    cmds:
      - |
        flux get helmrelease --all-namespaces --no-header | awk '{print $1, $2}' \
          | xargs -L 1 bash -c 'flux -n $0 resume helmrelease $1'

  # Flux Kustomizations
  ks-suspend:
    desc: Suspend flux kustomization resources
    summary: |
      Args:
        release: Kustomization name to suspend (required)
    silent: true
    vars:
      release: '{{ or .release (fail "Argument (release) is required") }}'
      cmd: flux suspend kustomization -n flux-system {{.release}}
      # preconditions:
        # - sh: flux get kustomizations -n flux-system {{.release}}
          # msg: "Kustomization name not found"

  ks-resume:
    desc: Resume flux kustomization resources
    summary: |
      Args:
        release: Kustomization name to resume (required)
    silent: true
    vars:
      release: '{{ or .release (fail "Argument (release) is required") }}'
      cmd: flux resume kustomization -n flux-system {{.release}}
      # preconditions:
        # - sh: flux get kustomizations -n flux-system {{.release}}
          # msg: "Kustomization name not found"

  ks-suspend-all:
    desc: Suspend all Flux Kustomizations
    cmds:
      - |
        flux get kustomizations --all-namespaces --no-header | awk '{print $1, $2}' \
          | xargs -L 1 bash -c 'flux -n $0 suspend kustomization $1'

  ks-resume-all:
    desc: Resume all Flux Kustomizations
    cmds:
      - |
        flux get kustomizations --all-namespaces --no-header | awk '{print $1, $2}' \
          | xargs -L 1 bash -c 'flux -n $0 resume kustomization $1'

  kustomizations:
    desc: List all the kustomizations in your cluster
    cmds:
      - kubectl get kustomizations {{.CLI_ARGS | default "-A"}}

  helmreleases:
    desc: List all the helmreleases in your cluster
    cmds:
      - kubectl get helmreleases {{.CLI_ARGS | default "-A"}}

  helmrepositories:
    desc: List all the helmrepositories in your cluster
    cmds:
      - kubectl get helmrepositories {{.CLI_ARGS | default "-A"}}

  gitrepositories:
    desc: List all the gitrepositories in your cluster
    cmds:
      - kubectl get gitrepositories {{.CLI_ARGS | default "-A"}}
